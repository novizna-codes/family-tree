version: '3.8'

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: family-tree-db-prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - family-tree-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Laravel Backend
  backend:
    image: novizna/family-tree-backend:latest
    container_name: family-tree-backend-prod
    restart: always
    ports:
      - "8080:80"
    environment:
      - APP_NAME=${APP_NAME:-Family Tree Builder}
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=${APP_URL}
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - SANCTUM_STATEFUL_DOMAINS=${SANCTUM_STATEFUL_DOMAINS}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MAIL_MAILER=${MAIL_MAILER:-smtp}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    volumes:
      - backend_storage:/var/www/html/storage
    depends_on:
      db:
        condition: service_healthy
    networks:
      - family-tree-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      timeout: 10s
      retries: 5
      start_period: 30s

  # React Frontend
  frontend:
    image: novizna/family-tree-frontend:latest
    container_name: family-tree-frontend-prod
    restart: always
    ports:
      - "3000:80"
    networks:
      - family-tree-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      timeout: 10s
      retries: 5

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: family-tree-redis-prod
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - family-tree-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: family-tree-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - family-tree-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_storage:
    driver: local

networks:
  family-tree-network:
    driver: bridge